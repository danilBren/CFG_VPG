grammar Thrift_tagged.txt;


document
	: header* definition* EOF
	;

definition
	: struct_
	| senum
	| const_rule
	| service
	| enum_rule
	| union_
	| exception
	| typedef_
	;

typedef_
	: 'typedef' field_type IDENTIFIER type_annotations?
	;

type_annotations
	: <'(' type_annotation* ')'>
	;

type_annotation
	: IDENTIFIER _new_rule_7? list_separator?
	;

list_separator
	: COMMA
	| ';'
	;

_new_rule_7
	: '=' annotation_value
	;

annotation_value
	: integer
	| LITERAL
	;

integer
	: HEX_INTEGER
	| INTEGER
	;

field_type
	: container_type
	| base_type
	| IDENTIFIER
	;

base_type
	: real_base_type type_annotations?
	;

real_base_type
	: TYPE_BYTE
	| TYPE_I32
	| TYPE_I16
	| TYPE_STRING
	| TYPE_BOOL
	| TYPE_DOUBLE
	| TYPE_I64
	| TYPE_BINARY
	;

container_type
	: _new_rule_8 type_annotations?
	;

_new_rule_8
	: set_type
	| map_type
	| list_type
	;

list_type
	: 'list' <'<' field_type '>'> cpp_type?
	;

cpp_type
	: 'cpp_type' LITERAL
	;

map_type
	: 'map' cpp_type? <'<' _L_field_type_COMMA_field_type '>'>
	;

_L_field_type_COMMA_field_type
	: field_type COMMA field_type
	;

set_type
	: 'set' cpp_type? <'<' field_type '>'>
	;

exception
	: 'exception' IDENTIFIER <'{' field* '}'> type_annotations?
	;

field
	: field_id? field_req? field_type IDENTIFIER _new_rule_2? type_annotations? list_separator?
	;

_new_rule_2
	: '=' const_value
	;

const_value
	: const_list
	| integer
	| IDENTIFIER
	| const_map
	| DOUBLE
	| LITERAL
	;

const_map
	: <'{' const_map_entry* '}'>
	;

const_map_entry
	: const_value ':' const_value list_separator?
	;

const_list
	: <'[' _new_rule_9* ']'>
	;

_new_rule_9
	: const_value list_separator?
	;

field_req
	: 'required'
	| 'optional'
	;

field_id
	: integer ':'
	;

union_
	: 'union' IDENTIFIER <'{' field* '}'> type_annotations?
	;

enum_rule
	: 'enum' IDENTIFIER <'{' enum_field* '}'> type_annotations?
	;

enum_field
	: IDENTIFIER _new_rule_3? type_annotations? list_separator?
	;

_new_rule_3
	: '=' integer
	;

service
	: 'service' IDENTIFIER _new_rule_5? <'{' function_* '}'> type_annotations?
	;

function_
	: oneway? function_type IDENTIFIER <'(' field* ')'> throws_list? type_annotations? list_separator?
	;

throws_list
	: 'throws' <'(' field* ')'>
	;

function_type
	: 'void'
	| field_type
	;

oneway
	: _new_rule_6
	;

_new_rule_6
	: 'async'
	| 'oneway'
	;

_new_rule_5
	: 'extends' IDENTIFIER
	;

const_rule
	: 'const' field_type IDENTIFIER _new_rule_2? list_separator?
	;

senum
	: 'senum' IDENTIFIER <'{' _new_rule_4* '}'> type_annotations?
	;

_new_rule_4
	: LITERAL list_separator?
	;

struct_
	: 'struct' IDENTIFIER <'{' field* '}'> type_annotations?
	;

header
	: namespace_
	| cpp_include
	| include_
	;

include_
	: 'include' LITERAL
	;

cpp_include
	: 'cpp_include' LITERAL
	;

namespace_
	: 'namespace' IDENTIFIER _new_rule_1 type_annotations?
	| 'cpp_namespace' IDENTIFIER
	| 'namespace' '*' _new_rule_1
	| 'php_namespace' IDENTIFIER
	;

_new_rule_1
	: IDENTIFIER
	| LITERAL
	;
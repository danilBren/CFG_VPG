grammar matlab_tagged.txt;


file_
	: statement_list? EOF
	;

statement_list
	: statement statement_list`
	;

statement_list`
	:
	| statement statement_list`
	;

statement
	: global_statement
	| selection_statement
	| clear_statement
	| jump_statement
	| assignment_statement
	| iteration_statement
	| expression_statement
	;

expression_statement
	: expression eostmt
	| eostmt
	;

eostmt
	: ';'
	| CR
	| ','
	;

expression
	: or_expression expression`
	;

expression`
	:
	| ':' or_expression expression`
	;

or_expression
	: and_expression or_expression`
	;

or_expression`
	:
	| '|' and_expression or_expression`
	;

and_expression
	: equality_expression and_expression`
	;

and_expression`
	:
	| '&' equality_expression and_expression`
	;

equality_expression
	: relational_expression equality_expression`
	;

equality_expression`
	:
	| EQ_OP relational_expression equality_expression`
	| NE_OP relational_expression equality_expression`
	;

relational_expression
	: additive_expression relational_expression`
	;

relational_expression`
	:
	| '>' additive_expression relational_expression`
	| LE_OP additive_expression relational_expression`
	| GE_OP additive_expression relational_expression`
	| '<' additive_expression relational_expression`
	;

additive_expression
	: multiplicative_expression additive_expression`
	;

additive_expression`
	:
	| '+' multiplicative_expression additive_expression`
	| '-' multiplicative_expression additive_expression`
	;

multiplicative_expression
	: unary_expression multiplicative_expression`
	;

multiplicative_expression`
	: '^' unary_expression multiplicative_expression`
	|
	| '\\' unary_expression multiplicative_expression`
	| ARRAYMUL unary_expression multiplicative_expression`
	| '*' unary_expression multiplicative_expression`
	| ARRAYPOW unary_expression multiplicative_expression`
	| ARRAYDIV unary_expression multiplicative_expression`
	| ARRAYRDIV unary_expression multiplicative_expression`
	| '/' unary_expression multiplicative_expression`
	;

unary_expression
	: postfix_expression
	| unary_operator postfix_expression
	;

unary_operator
	: '~'
	| '+'
	| '-'
	;

postfix_expression
	: array_expression postfix_expression`
	| primary_expression postfix_expression`
	;

primary_expression
	: '[' array_list ']'
	| IDENTIFIER
	| CONSTANT
	| <'(' expression ')'>
	| '[' ']'
	| STRING_LITERAL
	;

array_list
	: array_element array_list`
	;

array_list`
	:
	| array_element array_list`
	;

array_element
	: expression
	| expression_statement
	;

postfix_expression`
	: NCTRANSPOSE postfix_expression`
	|
	| TRANSPOSE postfix_expression`
	;

array_expression
	: IDENTIFIER <'(' index_expression_list ')'>
	;

index_expression_list
	: index_expression index_expression_list`
	;

index_expression_list`
	: ',' index_expression index_expression_list`
	|
	;

index_expression
	: expression
	| ':'
	;

iteration_statement
	: FOR <'(' _L_IDENTIFIER_'='_expression ')'> statement_list END eostmt
	| FOR IDENTIFIER '=' expression statement_list END eostmt
	| WHILE expression statement_list END eostmt
	;

_L_IDENTIFIER_'='_expression
	: IDENTIFIER '=' expression
	;

assignment_statement
	: assignment_expression eostmt
	;

assignment_expression
	: postfix_expression '=' expression
	;

jump_statement
	: BREAK eostmt
	| RETURN eostmt
	;

clear_statement
	: CLEAR identifier_list eostmt
	;

identifier_list
	: IDENTIFIER identifier_list`
	;

identifier_list`
	:
	| IDENTIFIER identifier_list`
	;

selection_statement
	: IF expression statement_list elseif_clause ELSE statement_list END eostmt
	| IF expression statement_list ELSE statement_list END eostmt
	| IF expression statement_list elseif_clause END eostmt
	| IF expression statement_list END eostmt
	;

elseif_clause
	: ELSEIF expression statement_list elseif_clause`
	;

elseif_clause`
	:
	| ELSEIF expression statement_list elseif_clause`
	;

global_statement
	: GLOBAL identifier_list eostmt
	;